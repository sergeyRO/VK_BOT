import vk_api
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from config import TOKEN_BOT, GROUP_ID
from vk_api.bot_longpoll import VkBotLongPoll
from API_VK.api import api


class vkBot:
    def __init__(self, db):
        self.apiVK = api(db)
        self.vk_session = vk_api.VkApi(token=TOKEN_BOT)
        self.longpoll = VkBotLongPoll(self.vk_session, GROUP_ID)
        self.vk = self.vk_session.get_api()

        self.offset = self.apiVK.offset
        self.count_users = 0
        self.id_user = 0
        self.filter = self.apiVK.search_filter(self.id_user)
        self.message_id = 0

    # –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    def menu_keyboard(self):
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_callback_button(label='üîç –ü–û–ò–°–ö',
                                     color=VkKeyboardColor.SECONDARY,
                                     payload={"type": "search"})
        keyboard.add_line()
        keyboard.add_callback_button(label='‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ',
                                     color=VkKeyboardColor.POSITIVE,
                                     payload={"type": "favorites"})
        keyboard.add_callback_button(label='‚úò –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫',
                                     color=VkKeyboardColor.NEGATIVE,
                                     payload={"type": "blacklist"})
        keyboard.add_line()
        keyboard.add_callback_button(label='‚öô –§–∏–ª—å—Ç—Ä',
                                     color=VkKeyboardColor.SECONDARY,
                                     payload={"type": "filter"})
        keyboard.add_callback_button(label='üöë HELP',
                                     color=VkKeyboardColor.PRIMARY,
                                     payload={"type": "help"})
        return keyboard

    # –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ª–∏—Å—Ç–∞–Ω–∏—è –ª—é–¥–µ–π
    def menu_search(self):
        keyboard_sender = VkKeyboard(inline=True)
        keyboard_sender.add_callback_button(label='‚¨Ö',
                                            color=VkKeyboardColor.SECONDARY,
                                            payload={"type": "search_back"})
        keyboard_sender.add_callback_button(label='‚ùå –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫',
                                            color=VkKeyboardColor.PRIMARY,
                                            payload={"type": "add_blacklist"})
        keyboard_sender.add_callback_button(label='‚ù§ –ò–∑–±—Ä–∞–Ω–Ω—ã–π',
                                            color=VkKeyboardColor.POSITIVE,
                                            payload={"type": "add_favorites"})
        keyboard_sender.add_callback_button(label='‚û°',
                                            color=VkKeyboardColor.SECONDARY,
                                            payload={"type": "search_next"})
        return keyboard_sender

    # –ú–µ—Ç–æ–¥ —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç –±–æ—Ç–∞
    def message(self, peer_id, random_id,
                message, keyboard=None, attachment=None):
        if keyboard is not None:
            keyboard = keyboard.get_keyboard()
        else:
            keyboard = ''
        if attachment is not None:
            attachment = attachment
        else:
            attachment = ''
        return self.vk.messages.send(
            peer_id=peer_id,
            random_id=random_id,
            keyboard=keyboard,
            message=message,
            attachment=attachment
        )

    # –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ü–û–ú–û–©–ò
    def bot_help_message(self):
        message = "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n" \
                  "help - —Å–ø—Ä–∞–≤–∫–∞\n" \
                  "start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" \
                  "search - –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É\n" \
                  "search_next - –ø–æ–∏—Å–∫, –ª–∏—Å—Ç–∞—Ç—å –î–∞–ª–µ–µ\n" \
                  "search_back - –ø–æ–∏—Å–∫, –ª–∏—Å—Ç–∞—Ç—å –ù–∞–∑–∞–¥\n" \
                  "filter - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–∏—Å–∫–∞\n" \
                  "filter_setting 1,99,2,6,20,23 -" \
                  " –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞\n" \
                  "add_favorites - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ\n" \
                  "add_blacklist - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ç–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n" \
                  "favorites - —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" \
                  "blacklist - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ø–∞–≤—à–∏—Ö –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        return message

    # –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞, —á—Ç–æ–± –Ω–µ –∑–∞—Å–∏—Ä–∞—Ç—å —á–∞—Ç
    def worker_message(self, user_id, action):
        offset = self.offset
        id_m = self.apiVK.worker_message(
            user_id, self.message_id,
            offset, action)
        if action == 'drop' and id_m != 0:
            self.vk.messages.delete(
                message_ids=id_m,
                group_id=GROUP_ID,
                delete_for_all=True,
            )

    # –ú–µ—Ç–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á—Ç–æ —Å –∫–æ–º–∞–Ω–¥, —á—Ç–æ —Å –∫–Ω–æ–ø–æ–∫
    def bot_command(self, event_command, event, peer_id, random_id):
        offset = self.offset
        count_users = self.count_users
        filter = self.filter
        id_user = self.id_user

        if event_command == 'start':
            self.worker_message(peer_id, 'drop')
            user = self.apiVK.user(event.object.message['from_id'])
            keyboard = self.menu_keyboard()
            message = f'–ü—Ä–∏–≤–µ—Ç, {user["first_name"]}!\n ' \
                      f'–¢–∞–∫ –∫–∞–∫ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è ' \
                      f'–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ' \
                      f'–º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä—Ç–º—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤!\n' \
                      f'–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π' \
                      f' –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è!\n'
            self.message_id = self.message(peer_id,
                                           random_id,
                                           message,
                                           keyboard)
            print(f"Start====>  {self.message_id}")
            self.worker_message(peer_id, 'insert')
            self.filter = user["filter"]

        elif event_command == 'help':
            self.worker_message(peer_id, 'drop')
            message = self.bot_help_message()
            self.message_id = self.message(peer_id, random_id, message)
            print(f"HELP====>   {self.message_id}")
            self.worker_message(peer_id, 'insert')

        elif 'search' in event_command:
            self.worker_message(peer_id, 'drop')
            if event_command == 'search':
                offset = 0
                command = 'search'
            elif event_command == 'search_next':
                if offset > count_users:
                    offset = count_users
                else:
                    offset += 1
                command = 'search_next'
            elif event_command == 'search_back':
                if offset > 0:
                    offset -= 1
                    command = 'search_back'
                else:
                    offset = 0
                    command = 'search'
            users = self.apiVK.search_users(peer_id, offset, filter, command)
            self.offset = users['offset']
            self.count_users = users["count"]
            keyboard = self.menu_search()
            if users['star'] is True:
                star = '‚≠ê '
            else:
                star = ''
            message = f'{star}{users["users"][0]["first_name"]} ' \
                      f'{users["users"][0]["last_name"]}\n' \
                      f'https://vk.com/id{users["users"][0]["id_user"]}'
            attachment = users['users'][0]['photo']
            self.message_id = self.message(
                peer_id, random_id,
                message, keyboard, attachment)
            self.id_user = users["users"][0]["id_user"]
            print(f"SEARCH={command}===> {self.message_id}")
            self.worker_message(peer_id, 'insert')

        elif event_command == 'add_favorites':
            # self.worker_message(peer_id, 'insert')
            if id_user != 0:
                list_favorites = self.apiVK.insert_favorites(id_user, peer_id)
                if list_favorites is not False:
                    message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ!!!!!" \
                              f" –í –≤–∞—à–µ–º –ª–∏—Å—Ç–µ {list_favorites}"
                else:
                    message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω " \
                              "–≤ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –ª–∏—Å—Ç–æ–≤!!!"
                self.message_id = self.message(peer_id, random_id, message)
                print(f"ADD_FAVORITES====>{self.message_id}")
                self.worker_message(peer_id, 'insert')
                # self.delete_message()
                self.worker_message(peer_id, 'drop')

        elif event_command == 'add_blacklist':
            if id_user != 0:
                list_black = self.apiVK.insert_blacklist(id_user, peer_id)
                if list_black is not False:
                    message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!!!!!" \
                              f" –í –≤–∞—à–µ–º –ª–∏—Å—Ç–µ {list_black}"
                else:
                    message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω" \
                              " –≤ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –ª–∏—Å—Ç–æ–≤!!!"
                self.message_id = self.message(peer_id, random_id, message)
                print(f"ADD_BLACKLIST====>{self.message_id}")
                self.worker_message(peer_id, 'insert')
            self.worker_message(peer_id, 'drop')

        elif event_command == 'filter':
            self.worker_message(peer_id, 'drop')
            message = f"–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ (–°—Ç—Ä–∞–Ω–∞, –ì–æ—Ä–æ–¥, –ü–æ–ª, –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ," \
                      f" –í–æ–∑—Ä–∞—Å—Ç —Å, –í–æ–∑—Ä–∞—Å—Ç –ø–æ). " \
                      f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ–∏–ª—å—Ç—Ä {filter}"
            self.message_id = self.message(peer_id, random_id, message)
            print(f"FILTER====>{self.message_id}")
            self.worker_message(peer_id, 'insert')

        elif 'filter_setting' in event_command:
            self.worker_message(peer_id, 'drop')
            string = event.object.message['text'] \
                .lower().replace("filter_setting", "")
            new_filter = self.apiVK.update_filter(peer_id, string)
            self.filter = new_filter
            message = f"–§–∏–ª—å—Ç—Ä—ã –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_filter}!!!!!"
            self.message_id = self.message(peer_id, random_id, message)
            print(f"FILTER_SETTING====>{self.message_id}")
            self.worker_message(peer_id, 'insert')

        elif event_command == 'favorites':
            self.worker_message(peer_id, 'drop')
            message = ''
            list_favorite = self.apiVK.view_favorites(peer_id)
            for item in list_favorite:
                message += f"https://vk.com/id{item}\n"
            message = f"–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ {len(list_favorite)}:\n" \
                      f"{message}"
            self.message_id = self.message(peer_id, random_id, message)
            print(f"FAVORITES====>{self.message_id}")
            self.worker_message(peer_id, 'insert')

        elif event_command == 'blacklist':
            self.worker_message(peer_id, 'drop')
            message = ''
            list_blacklist = self.apiVK.view_blacklist(peer_id)
            for item in list_blacklist:
                message += f"https://vk.com/id{item}\n"
            message = f"–í–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞" \
                      f" {len(list_blacklist)}:\n{message}"
            self.message_id = self.message(peer_id, random_id, message)
            print(f"BLACKLIST====>{self.message_id}")
            self.worker_message(peer_id, 'insert')
